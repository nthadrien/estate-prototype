---
import type { GetStaticPaths } from "astro";
import { languages } from "src/i18n/ui.ts";;
import Layout from "@layouts/AccountLayout.astro";
import { getLangFromUrl, useTranslations } from "src/i18n/utils.ts";

export const getStaticPaths = (() => {
    return Object.keys(languages).map( 
        locale => ({ params: { locale }})
    );
}) satisfies GetStaticPaths;

const locale = getLangFromUrl(Astro.url);
const t = useTranslations(locale);

const title = () => locale == "en" ? "login": "comptes"; 
const description = () => locale == "en" ? "description in english":"description en francais";
const keywords = () => locale == "en" ? ["one","two"] : ["un","deux"];
---

<Layout title={title()} description={description()} keywords={keywords()}>

    <form id="subs" style="max-width: 568px;" class="p-3 mt-4">

        <h3 class="mb-4 text-capitalize">{t("accn")}</h3>

        <div class="mb-3">
            <label for="email" class="form-label text-capitalize">{t("email")}</label>
            <input type="email" class="form-control" autocomplete="email" placeholder={t("email.placeholder")} id="email" name="mail" aria-describedby="emailHelp" value="mail@box.dom"  required/>
        </div>

        <div class="mb-3">
            <label for="password" class="form-label text-capitalize">{t("password")}</label>
            <input type="password" class="form-control" id="password" name="password" autocomplete="current-password" value="mail@box.dom" minlength="3" placeholder="*****" aria-describedby="passwordHelp" required/>
        </div> 

        <p class="mb-4">
            {t("login.text1")} <a class="fw-semibold text-primary" href={`/${locale}/accounts/register`}>{t("click.h")}</a> {t("login.text2")} .
            {t("login.text3")}  <a class="fw-semibold text-primary" href={`/${locale}/contact-us`}>{t("click.h")}</a> {t("login.text4")} .
        </p>

        <button class="btn btn-primary mb-3 w-100">
            {t("nav.login")}
        </button>

        <p id="error" class="d-none border border-danger-subtle w-100 rounded-3 p-3 bg-danger-subtle text-danger">
            Wrong Email or Password
        </p>

    </form>

    
<!-- 
    <section style="max-width: 568px;" >
        <p class="my-4 text-center">
            {t("or")}
        </p>
    
        <button class="btn btn-dark w-100 mb-3" disabled>
            Google Account
        </button>
    
        <button class="btn btn-light border w-100 mb-3" disabled>
            Facebook Account
        </button>
    </section> -->

</Layout>

<script>
    import { $locale , $user, notifications, type UserType, isHost, isClient } from "src/stores/user.ts";

    const form : HTMLFormElement | null = document.querySelector("#subs");
    
    form?.addEventListener("submit", async (event:SubmitEvent) => {
        event.preventDefault();
        const formData = new FormData(event.target as HTMLFormElement );
        const formDataEntries = Array.from(formData.entries());
        const formDataObject = Object.fromEntries(formDataEntries);
        // const resp = await fetch(`http://localhost:8000/users?hash=${formDataObject?.password}&email=${formDataObject?.mail}`);
        const resp =  await fetch(`http://localhost:8000/users?email=boris@host2.com&hash=host1`);
        if(resp.ok) {
            const results : UserType[] = await resp.json();
            console.log(results);
            $user.set({ ...results[0]});
            implicitRedirects()
        } else { 
            notifications({
                code:404,
                message:"Wriong crendentials",
                type:"error"
            });
        }
    });

    const implicitRedirects = () => {
        if ( isHost() ) window.location.assign(`/${$locale.get()}/dashboard/host#home`);
        if( isClient() ) window.location.assign(`/${$locale.get()}/dashboard/host#home`);
        else throw new Error ("OOOOpppopopopopop ")
    }

    if( $user.get().id !== "n/a" && $user.get().id !== "none" && $user.get().role && $user.get().role != "n/a" ) implicitRedirects();
    
</script>

